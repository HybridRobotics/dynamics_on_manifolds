package hybridrobotics.dynamics.coder

import java.util.Date
import java.io.{File, PrintWriter}
import hybridrobotics.dynamics.data_types._

object Matlab {

  def generateLinearDynamics(output_variables: (List[ScalarExpr], List[VectorExpr], List[MatrixExpr]),
                             state_variables: (List[ScalarExpr], List[VectorExpr], List[MatrixExpr]),
                             input_variables: (List[ScalarExpr], List[VectorExpr], List[MatrixExpr]),
                             coefficients: (Map[ScalarExpr, VectorExpr], Map[VectorExpr, MatrixExpr], Map[MatrixExpr, MatrixExpr])): (String, String) = {
    // This function generates M\ddot{x} = A*x + B*u function // TODO update this compute M\dot{x} = Ax + Bu
    //
    ("", "")
  }

  def matrixExpr2Matlab(mexpr: MatrixExpr): String = {
    mexpr match {
      // Matrix Functions
      case SMMul(a, b) => "(" + scalarExpr2Matlab(b) + ")*(" + matrixExpr2Matlab(a) + ")"
      case MAdd(a, b) => "((" + matrixExpr2Matlab(a) + ")+(" + matrixExpr2Matlab(b) + "))"
      case MMul(a, b) => "(" + matrixExpr2Matlab(a) + ")*(" + matrixExpr2Matlab(b) + ")"
      case VVMul(u, v) => "(" + vectorExpr2Matlab(u) + ")*(" + vectorExpr2Matlab(v) + ")"
      case TransposeMatrix(s) => "transpose(" + matrixExpr2Matlab(s) + ")"
      case CrossMap(v) => "hat(" + vectorExpr2Matlab(v) + ")"

      // Matlab Variables
      case ZeroMatrix() => "zeros(3,3)"
      case IdentityMatrix() => "eye(3)"
      case SO3(s) => getVariableName(s)
      case Matrix(s) => getVariableName(s)
      case SymMatrix(s) => getVariableName(s)
      case ConstMatrix(s) => getVariableName(s)
      case ConstSymMatrix(s) => getVariableName(s)
      case SkewSymMatrix(s) => getVariableName(s)
      case DeltaM(s) => "del_" + matrixExpr2Matlab(s)

      // Restricted functions/variables

      // default
      case _ => """error('MISSING MATRIX EXPR')"""
    }
  }

  def vectorExpr2Matlab(vexpr: VectorExpr): String = {
    vexpr match {
      // Vector operations
      case VAdd(u, v) => "((" + vectorExpr2Matlab(u) + ")+(" + vectorExpr2Matlab(v) + "))"
      case Cross(u, v) => "cross(" + vectorExpr2Matlab(u) + "," + vectorExpr2Matlab(v) + ")"
      case SMul(u, v) => "(" + scalarExpr2Matlab(v) + ")*(" + vectorExpr2Matlab(u) + ")"
      case MVMul(u, v) => "(" + matrixExpr2Matlab(u) + ")*(" + vectorExpr2Matlab(v) + ")"
      case TransposeVector(v) => "transpose(" + vectorExpr2Matlab(v) + ")"

      // Vector variables
      case OnesVector() => "ones(3,1)"
      case ZeroVector() => "zeros(3,1)"
      case S2(s) => getVariableName(s)
      case Vector(s) => getVariableName(s)
      case UnitVector(s) => getVariableName(s)
      case ConstVector(s) => getVariableName(s)
      case DeltaV(u) => "del_" + vectorExpr2Matlab(u)

      // Restricted functions/variables

      // default
      case _ => """error('MISSING VECTOR EXPR')"""
    }

  }

  def scalarExpr2Matlab(sexpr: ScalarExpr): String = {
    sexpr match {
      // scalar operations
      case Add(u, v) => "((" + scalarExpr2Matlab(u) + ")+(" + scalarExpr2Matlab(v) + "))"
      case Mul(u, v) => "(" + scalarExpr2Matlab(u) + ")*(" + scalarExpr2Matlab(v) + ")"
      case Dot(u, v) => "dot(" + vectorExpr2Matlab(u) + "," + vectorExpr2Matlab(v) + ")"
      case Par(u) => "(" + scalarExpr2Matlab(u) + ")"

      // scalar variables
      case VarScalar(s) => getVariableName(s)
      case ConstScalar(s) => getVariableName(s)
      case NumScalar(d) => "(" + d.toString + ")"
      case DeltaS(u) => "del_" + scalarExpr2Matlab(u)

      // Restricted functions/variables

      // default
      case _ => """error('MISSING SCALAR EXPR')"""
    }
  }

  def getVariableName(str_raw: String): String = {
    var s = str_raw
    val ddt = s contains "dotdot"
    val dt = s contains "dot"
    val l = s.length

    if (ddt) {
      s.replace("dotdot", "dd")
    }
    else if (dt) {
      s.replace("dot", "d")
    }
    else if (s contains "{") {
      s.replace("{", "")
    }
    else if (s contains "}") {
      s.replace("", "")
    }
    else {
      s
    }
  }

  def generateMatlabFunction(filename: String): Unit = {

    // TODO: take output variables
    val FILE_PATH = new java.io.File(".").getCanonicalPath
    val directory = new File(FILE_PATH + File.separator + "output" + File.separator + "matlab")
    directory.mkdirs()
    val writer = new PrintWriter(new File(directory + File.separator + filename + ".m"))

    val date = new Date
    writer.write("function [varargout] = " + filename + "(varargin)\n")
    writer.write("%% \n")
    writer.write("% This function was generated by the Scala: Dynamics on Manifold package\n")
    writer.write(s"% ${date}\n")
    writer.write("% \n")
    writer.write("% NOTE: This function makes use of geometric-toolbox\n")
    writer.write("% \t\t link: https://github.com/HybridRobotics/geometric-toolbox\n")

    writer.write("%%\n\n\n")

    writer.write("\n\n\nend")
    writer.close()

  }

}
